Require Export Coq.Unicode.Utf8.

Require Export FcEtt.ett_ott.
Require Export Metalib.Metatheory.

(* TODO: Modularize, so we can import on demand *)
(* Typing *)
Notation "Œì ‚ä® a : A / R"            := (Typing Œì a A R)      (at level 80, a at level 35, A at level 35)  : type_scope.
Notation "Œì ; Œî ‚ä® a‚ÇÅ == a‚ÇÇ : A / R" := (DefEq Œì Œî a‚ÇÅ a‚ÇÇ A R) (at level 80, a‚ÇÅ at level 35, A at level 35) : type_scope.
Notation "Œì ; Œî ‚ä® œÜ‚ÇÅ == œÜ‚ÇÇ"         := (Iso Œì Œî œÜ‚ÇÅ œÜ‚ÇÇ)       (at level 80, œÜ‚ÇÅ at level 35, œÜ‚ÇÇ at level 35): type_scope.
Notation "Œì ‚ä® œÜ 'Ok'"               := (PropWff Œì œÜ)         (at level 80, œÜ at level 35)                 : type_scope.


(* Reductions *)
Notation "Œì / D / Œ∂ ‚ä® a ‚áí b / R" := (Par Œì D Œ∂ a b R) (at level 80, b at level 35).
Notation "‚ä® a ‚Üù b / R"  := (reduction_in_one a b R) (at level 80, b at level 35).

(* Predicates *)
(* Notation "Œ∂ ‚ä® üëª a / R" := (erased_tm Œ∂ a R) (at level 80, a at level 35). *)
Notation "Œ∂ ‚ä® a : R" := (erased_tm Œ∂ a R) (at level 80, a at level 35, R at level 35).


(* Other relations *)
Notation "x ‚àà S" := (x `in`    S) (at level 70).
Notation "x ‚àâ S" := (x `notin` S) (at level 70).

Notation "( œÅ = +)‚à®( x ‚àâ 'ùïóùïß' A )" := (RhoCheck œÅ x A) (at level 70, only printing).
Notation "œÅ-check œÅ x A" := (RhoCheck œÅ x A) (at level 70, only printing).

(* Functions *)
Notation "'‚Ñ±ŒΩ' a" := (fv_tm_tm_tm a) (at level 50, only printing).
Notation "'‚Ñ±ŒΩ' a" := (fv_tm_tm_co a) (at level 50, only printing).
Notation "'‚Ñ±ŒΩ' œÜ" := (fv_co_co_co œÜ) (at level 50, only printing).
Notation "'‚Ñ±ŒΩ' œÜ" := (fv_co_co_tm œÜ) (at level 50, only printing).

Notation "a ‚à™ b" := (a `union` b) (at level 50).

Notation "| G |" := (ctx_to_rctx G) (at level 10).

(* Elements *)
Notation "‚àÖ" := nil.

Notation "x ‚üπ y" := (x -> y)
  (at level 99, y at level 200, right associativity): type_scope.

(* TODO: add the missing ones *)

(* FIXME: Wrong priorities. For instance, the following formula shouldn't be printed with parens:
  (G ‚ä® A : T / R) ‚àß G ‚ä® B : T / R
*)